// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace EamaShop.Identity
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for IdentityClient.
    /// </summary>
    public static partial class IdentityClientExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// </param>
            public static object ApiAuthorizeJwtbearerPost(this IIdentityClient operations, JwtBearerAuthDto parameters = default(JwtBearerAuthDto))
            {
                return Task.Factory.StartNew(s => ((IIdentityClient)s).ApiAuthorizeJwtbearerPostAsync(parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiAuthorizeJwtbearerPostAsync(this IIdentityClient operations, JwtBearerAuthDto parameters = default(JwtBearerAuthDto), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAuthorizeJwtbearerPostWithHttpMessagesAsync(parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// 身份认证的授权token
            /// </param>
            public static object ApiUserGet(this IIdentityClient operations, string authorization)
            {
                return Task.Factory.StartNew(s => ((IIdentityClient)s).ApiUserGetAsync(authorization), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// 身份认证的授权token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiUserGetAsync(this IIdentityClient operations, string authorization, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiUserGetWithHttpMessagesAsync(authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// 身份认证的授权token
            /// </param>
            /// <param name='parameters'>
            /// </param>
            public static void ApiUserPut(this IIdentityClient operations, string authorization, UserPutDTO parameters = default(UserPutDTO))
            {
                Task.Factory.StartNew(s => ((IIdentityClient)s).ApiUserPutAsync(authorization, parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// 身份认证的授权token
            /// </param>
            /// <param name='parameters'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiUserPutAsync(this IIdentityClient operations, string authorization, UserPutDTO parameters = default(UserPutDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiUserPutWithHttpMessagesAsync(authorization, parameters, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// </param>
            public static IDictionary<string, string> ApiUserPost(this IIdentityClient operations, UserRegisterDTO parameters = default(UserRegisterDTO))
            {
                return Task.Factory.StartNew(s => ((IIdentityClient)s).ApiUserPostAsync(parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IDictionary<string, string>> ApiUserPostAsync(this IIdentityClient operations, UserRegisterDTO parameters = default(UserRegisterDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiUserPostWithHttpMessagesAsync(parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// </param>
            public static void ApiUserPasswordPut(this IIdentityClient operations, UserPasswordPutDTO parameters = default(UserPasswordPutDTO))
            {
                Task.Factory.StartNew(s => ((IIdentityClient)s).ApiUserPasswordPutAsync(parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiUserPasswordPutAsync(this IIdentityClient operations, UserPasswordPutDTO parameters = default(UserPasswordPutDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiUserPasswordPutWithHttpMessagesAsync(parameters, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// 身份认证的授权token
            /// </param>
            /// <param name='parameters'>
            /// </param>
            public static void ApiUserPhonePut(this IIdentityClient operations, string authorization, UserPhonePutDTO parameters = default(UserPhonePutDTO))
            {
                Task.Factory.StartNew(s => ((IIdentityClient)s).ApiUserPhonePutAsync(authorization, parameters), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='authorization'>
            /// 身份认证的授权token
            /// </param>
            /// <param name='parameters'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiUserPhonePutAsync(this IIdentityClient operations, string authorization, UserPhonePutDTO parameters = default(UserPhonePutDTO), CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiUserPhonePutWithHttpMessagesAsync(authorization, parameters, null, cancellationToken).ConfigureAwait(false);
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='authorization'>
            /// 身份认证的授权token
            /// </param>
            public static void ApiUserRoleByIdPut(this IIdentityClient operations, long id, string authorization)
            {
                Task.Factory.StartNew(s => ((IIdentityClient)s).ApiUserRoleByIdPutAsync(id, authorization), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='authorization'>
            /// 身份认证的授权token
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiUserRoleByIdPutAsync(this IIdentityClient operations, long id, string authorization, CancellationToken cancellationToken = default(CancellationToken))
            {
                await operations.ApiUserRoleByIdPutWithHttpMessagesAsync(id, authorization, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
