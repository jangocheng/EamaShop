// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace EamaShop.Identity.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class UserPutDTO
    {
        /// <summary>
        /// Initializes a new instance of the UserPutDTO class.
        /// </summary>
        public UserPutDTO() { }

        /// <summary>
        /// Initializes a new instance of the UserPutDTO class.
        /// </summary>
        public UserPutDTO(string nickName, string headImageUri, int? sexy = default(int?), string country = default(string), string city = default(string), string province = default(string))
        {
            NickName = nickName;
            HeadImageUri = headImageUri;
            Sexy = sexy;
            Country = country;
            City = city;
            Province = province;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "NickName")]
        public string NickName { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "HeadImageUri")]
        public string HeadImageUri { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Sexy")]
        public int? Sexy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Country")]
        public string Country { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "City")]
        public string City { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Province")]
        public string Province { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (NickName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "NickName");
            }
            if (HeadImageUri == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "HeadImageUri");
            }
        }
    }
}
